import cvxpy as cp
import numpy as np

def constrained_regression(B, a, solver=cp.OSQP):
    """
    Solves the constrained regression problem:
    
        minimize    || a - B beta ||^2
        subject to  a - B beta >= 0   (elementwise)
    
    This ensures that the residuals r = a - B beta are nonnegative.
    
    Parameters:
    -----------
    B : numpy.ndarray
        An (n x k) matrix of factor loadings.
    a : numpy.ndarray
        An n-dimensional vector representing the alpha (or adjusted response).
    solver : cvxpy solver (optional)
        The solver to use. Default is cp.OSQP.
    
    Returns:
    --------
    beta_opt : numpy.ndarray
        The optimal k-dimensional coefficient vector.
    resid_opt : numpy.ndarray
        The n-dimensional vector of residuals (a - B beta_opt),
        guaranteed to be nonnegative.
    status : str
        The status of the CVXPY problem (e.g., 'optimal').
    
    Raises:
    -------
    ValueError:
        If the problem is infeasible or unbounded.
    """
    # Determine dimensions
    n, k = B.shape
    
    # Define the optimization variable
    beta = cp.Variable(k)
    
    # Define the residuals
    residuals = a - B @ beta
    
    # Set up the objective function (minimize the sum of squared residuals)
    objective = cp.Minimize(cp.sum_squares(residuals))
    
    # Add the constraint that residuals must be nonnegative
    constraints = [residuals >= 0]
    
    # Formulate the problem
    problem = cp.Problem(objective, constraints)
    
    # Solve the problem using the chosen solver
    problem.solve(solver=solver)
    
    # Check that the problem was solved successfully
    if problem.status in ["infeasible", "unbounded"]:
        raise ValueError(f"Problem status: {problem.status}")
    
    # Return the optimal beta and the corresponding residuals, along with the problem status
    beta_opt = beta.value
    resid_opt = residuals.value
    return beta_opt, resid_opt, problem.status

# Example usage:
if __name__ == "__main__":
    # Set a random seed for reproducibility
    np.random.seed(0)
    
    # Example dimensions
    n = 100  # number of assets
    k = 5    # number of factors
    
    # Create a sample alpha vector, ensuring it's positive
    a = np.abs(np.random.randn(n)) + 1.0
    
    # Create a random factor loadings matrix B (n x k)
    B = np.random.randn(n, k)
    
    # Call the function
    beta_opt, resid_opt, status = constrained_regression(B, a)
    
    print("Optimal beta:\n", beta_opt)
    print("Residuals (should be >= 0):\n", resid_opt)
    print("Problem status:", status)

`
