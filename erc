import numpy as np

def newton_erc(Sigma, sigma, tol=1e-8, max_iter=1000, alpha=None):
    """
    Compute the Equal Risk Contribution (ERC) portfolio using the Newton-Raphson method.
    
    The optimization problem is:
        minimize    f(y) = 0.5 * y.T @ Sigma @ y - lambda_c * sum(ln(y))
        where y > 0 is an auxiliary variable.
    
    The ERC portfolio weights are then obtained as:
        x_erc = y / sum(y)
    
    Parameters:
        Sigma (np.ndarray): Covariance matrix of asset returns (n x n).
        sigma (np.ndarray): Vector of asset volatilities (length n), typically sqrt(diag(Sigma)).
        tol (float): Tolerance for the Newton-Raphson convergence.
        max_iter (int): Maximum number of iterations.
        alpha (float, optional): A scaling parameter to control the magnitude of y.
                                 If provided, lambda_c is adjusted using:
                                     lambda_c = n * alpha^2 * (expected_vol)^2
                                 where expected_vol is estimated from the normalized y.
    
    Returns:
        x_erc (np.ndarray): The normalized ERC portfolio weights.
        y (np.ndarray): The final (unnormalized) solution from the Newton-Raphson iterations.
        lambda_c (float): The final value of lambda_c used.
    """
    n = len(sigma)
    
    # 1. Initialize y^(0) using inverse volatility weights.
    y = 1.0 / sigma
    y = y / y.sum()  # normalize so that sum(y) == 1
    
    # 2. Compute the initial portfolio variance using y^(0)
    sigma2_y = y.T @ Sigma @ y
    
    # 3. Initialize lambda_c according to the slides:
    #    lambda_c = sigma^2(y^(0)) / n
    lambda_c = sigma2_y / n
    
    # Optionally adjust lambda_c to control the magnitude of y if alpha is provided.
    if alpha is not None:
        # Compute expected portfolio volatility from the normalized weights.
        x_erc_est = y / np.sum(y)
        sigma2_erc = x_erc_est.T @ Sigma @ x_erc_est
        lambda_c = n * (alpha ** 2) * sigma2_erc
    
    # Newton-Raphson iteration
    for iteration in range(max_iter):
        # Compute the gradient: grad = Sigma y - lambda_c * (1/y), elementwise division.
        grad = Sigma @ y - lambda_c / y
        
        # Compute the Hessian: Hessian = Sigma + lambda_c * diag(1 / y^2)
        H = Sigma + lambda_c * np.diag(1.0 / (y ** 2))
        
        # Solve for the Newton step: delta = H^{-1} * grad.
        try:
            delta = np.linalg.solve(H, grad)
        except np.linalg.LinAlgError as e:
            print("Linear algebra error during Newton-Raphson:", e)
            break
        
        # Update: y_new = y - delta.
        y_new = y - delta
        
        # Check convergence (using the norm of the update step).
        if np.linalg.norm(delta) < tol:
            y = y_new
            print(f"Convergence reached after {iteration+1} iterations.")
            break
        
        y = y_new
    else:
        print("Warning: Newton-Raphson did not converge within the maximum number of iterations.")
    
    # Normalize y to obtain the ERC portfolio weights.
    x_erc = y / y.sum()
    
    return x_erc, y, lambda_c

def test_newton_erc():
    """
    Run several test cases to verify that newton_erc() computes an ERC portfolio.
    """
    print("TEST 1: Identity Covariance Matrix")
    n = 5
    Sigma = np.eye(n)
    sigma = np.sqrt(np.diag(Sigma))
    x_erc, y, lambda_c = newton_erc(Sigma, sigma)
    print("ERC weights:", x_erc)
    print("Sum of weights:", x_erc.sum())
    # For an identity covariance matrix, the ERC portfolio is equally weighted.
    expected = np.ones(n) / n
    assert np.allclose(x_erc, expected, atol=1e-6), "Test 1 failed: Weights should be equal."
    
    print("\nTEST 2: 3-Asset Example")
    Sigma = np.array([[0.10, 0.02, 0.04],
                      [0.02, 0.08, 0.03],
                      [0.04, 0.03, 0.09]])
    sigma = np.sqrt(np.diag(Sigma))
    x_erc, y, lambda_c = newton_erc(Sigma, sigma)
    print("ERC weights:", x_erc)
    print("Sum of weights:", x_erc.sum())
    # Compute risk contributions: RC_i = x_i * (Sigma x)_i.
    RC = x_erc * (Sigma @ x_erc)
    print("Risk contributions:", RC)
    diff_RC = np.max(RC) - np.min(RC)
    print("Max difference in risk contributions:", diff_RC)
    assert diff_RC < 1e-6, "Test 2 failed: Risk contributions are not equal."
    
    print("\nTEST 3: 4-Asset Example")
    Sigma = np.array([[0.04, 0.01, 0.00, 0.00],
                      [0.01, 0.05, 0.02, 0.01],
                      [0.00, 0.02, 0.06, 0.02],
                      [0.00, 0.01, 0.02, 0.07]])
    sigma = np.sqrt(np.diag(Sigma))
    x_erc, y, lambda_c = newton_erc(Sigma, sigma)
    print("ERC weights:", x_erc)
    print("Sum of weights:", x_erc.sum())
    RC = x_erc * (Sigma @ x_erc)
    print("Risk contributions:", RC)
    diff_RC = np.max(RC) - np.min(RC)
    print("Max difference in risk contributions:", diff_RC)
    assert diff_RC < 1e-6, "Test 3 failed: Risk contributions are not equal."
    
    print("\nAll tests passed!")

if __name__ == "__main__":
    # Run the ERC function on a 3-asset example and print the results.
    print("Running main example:")
    Sigma_main = np.array([[0.10, 0.02, 0.04],
                           [0.02, 0.08, 0.03],
                           [0.04, 0.03, 0.09]])
    sigma_main = np.sqrt(np.diag(Sigma_main))
    x_erc, y_final, lambda_c = newton_erc(Sigma_main, sigma_main)
    print("Normalized ERC portfolio weights (x_erc):", x_erc)
    print("Final unnormalized weights (y):", y_final)
    print("Final lambda_c:", lambda_c)
    
    print("\nRunning tests:")
    test_newton_erc()
